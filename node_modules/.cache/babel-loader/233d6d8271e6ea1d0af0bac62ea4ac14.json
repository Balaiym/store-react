{"ast":null,"code":"export const productFormValidator = (field, inputValue) => {\n  const validateFields = ['name', 'price', 'image', 'weight', 'brand', 'category', 'gender'];\n  let value = '';\n\n  if (!validateFields.includes(field)) {\n    return null;\n  }\n\n  if (typeof inputValue === 'string') {\n    value = inputValue.trim();\n  }\n\n  if (typeof inputValue === 'object') {\n    if (inputValue.id) {\n      value = inputValue.id.trim();\n    } else {\n      value = '';\n    }\n  }\n\n  if (value.length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым'\n    };\n  }\n\n  if (field === 'image') {\n    const regexp = /(https?:\\/\\/.*\\.(?:png|jpg|jpeg))/;\n    const isImageUrl = regexp.test(value);\n    if (isImageUrl) return null;\n    return {\n      [field]: 'Укажите прямую ссылку на изображение с расширением .png, .jpg, jpeg'\n    };\n  }\n\n  return null;\n};\nexport const categoryFormValidator = (field, inputValue) => {\n  const validateFields = ['name', 'url'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым'\n    };\n  }\n\n  if (field === 'url') {\n    const regexp = /^[0-9A-Za-z-]+$/;\n    const url = regexp.test(inputValue);\n    if (url) return null;\n    return {\n      [field]: 'URL может содержать только цифры, буквы и дефисы'\n    };\n  }\n\n  return null;\n};\nexport const brandFormValidator = (field, inputValue) => {\n  const validateFields = ['name', 'url'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым'\n    };\n  }\n\n  if (field === 'url') {\n    const regexp = /^[0-9A-Za-z-]+$/;\n    const url = regexp.test(inputValue);\n    if (url) return null;\n    return {\n      [field]: 'URL может содержать только цифры, буквы и дефисы'\n    };\n  }\n\n  return null;\n};\nexport const cartFormValidator = (field, inputValue) => {\n  const validateFields = ['name', 'phone', 'address'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым'\n    };\n  }\n\n  return null;\n};","map":{"version":3,"names":["productFormValidator","field","inputValue","validateFields","value","includes","trim","id","length","regexp","isImageUrl","test","categoryFormValidator","url","brandFormValidator","cartFormValidator"],"sources":["C:/Users/Acer/Desktop/e-commerce-react-app-master/src/utils/validators.ts"],"sourcesContent":["export const productFormValidator = (field: string, inputValue: string | { [key: string]: string }) => {\n  const validateFields = ['name', 'price', 'image', 'weight', 'brand', 'category', 'gender'];\n  let value = '';\n\n  if (!validateFields.includes(field)) {\n    return null;\n  }\n\n  if (typeof inputValue === 'string') {\n    value = inputValue.trim();\n  }\n\n  if (typeof inputValue === 'object') {\n    if (inputValue.id) {\n      value = inputValue.id.trim();\n    } else {\n      value = '';\n    }\n  }\n\n  if (value.length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым',\n    };\n  }\n\n  if (field === 'image') {\n    const regexp = /(https?:\\/\\/.*\\.(?:png|jpg|jpeg))/;\n    const isImageUrl = regexp.test(value);\n\n    if (isImageUrl) return null;\n\n    return {\n      [field]: 'Укажите прямую ссылку на изображение с расширением .png, .jpg, jpeg',\n    };\n  }\n\n  return null;\n};\n\nexport const categoryFormValidator = (field: string, inputValue: string | { [key: string]: string }) => {\n  const validateFields = ['name', 'url'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым',\n    };\n  }\n\n  if (field === 'url') {\n    const regexp = /^[0-9A-Za-z-]+$/;\n    const url = regexp.test(inputValue);\n\n    if (url) return null;\n\n    return {\n      [field]: 'URL может содержать только цифры, буквы и дефисы',\n    };\n  }\n  return null;\n};\n\nexport const brandFormValidator = (field: string, inputValue: string | { [key: string]: string }) => {\n  const validateFields = ['name', 'url'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым',\n    };\n  }\n\n  if (field === 'url') {\n    const regexp = /^[0-9A-Za-z-]+$/;\n    const url = regexp.test(inputValue);\n\n    if (url) return null;\n\n    return {\n      [field]: 'URL может содержать только цифры, буквы и дефисы',\n    };\n  }\n  return null;\n};\n\nexport const cartFormValidator = (field: string, inputValue: string | { [key: string]: string }) => {\n  const validateFields = ['name', 'phone', 'address'];\n\n  if (!validateFields.includes(field) || typeof inputValue === 'object') {\n    return null;\n  }\n\n  if (inputValue.trim().length === 0) {\n    return {\n      [field]: 'Поле не может быть пустым',\n    };\n  }\n  return null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}