{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useForm = (initInput, callback, validator) => {\n  _s();\n\n  const [input, setInput] = useState(initInput);\n  const [errors, setErrors] = useState({});\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    clearValidation(name);\n    setInput(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const handleChangeSelect = option => {\n    const {\n      name,\n      id,\n      field,\n      url\n    } = option;\n    clearValidation(field);\n    setInput(prevState => ({ ...prevState,\n      [field]: {\n        name,\n        id,\n        url\n      }\n    }));\n  };\n\n  const submit = e => {\n    e.preventDefault();\n    const isFormValid = validate();\n    if (!isFormValid) return;\n    callback();\n    resetForm();\n  };\n\n  const validate = () => {\n    let isValid = true;\n    Object.entries(input).forEach(_ref => {\n      let [key, value] = _ref;\n      const inputErrorObj = validator(key, value);\n\n      if (inputErrorObj) {\n        isValid = false;\n        setErrors(prev => ({ ...prev,\n          ...inputErrorObj\n        }));\n      }\n    });\n    return isValid;\n  };\n\n  const clearValidation = field => {\n    if (field) {\n      setErrors(prevState => ({ ...prevState,\n        [field]: undefined\n      }));\n      return;\n    }\n\n    setErrors({});\n  };\n\n  const resetForm = () => {\n    setInput(initInput);\n    setErrors({});\n  };\n\n  return {\n    input,\n    errors,\n    setInput,\n    handleChange,\n    resetForm,\n    submit,\n    handleChangeSelect\n  };\n};\n\n_s(useForm, \"v44yPjIx7St4kQPtxs8EuqHd35I=\");\n\nexport default useForm;","map":{"version":3,"names":["useState","useForm","initInput","callback","validator","input","setInput","errors","setErrors","handleChange","e","name","value","target","clearValidation","prevState","handleChangeSelect","option","id","field","url","submit","preventDefault","isFormValid","validate","resetForm","isValid","Object","entries","forEach","key","inputErrorObj","prev","undefined"],"sources":["C:/Users/Acer/Desktop/e-commerce-react-app-master/src/hooks/useForm.tsx"],"sourcesContent":["import { useState } from 'react';\n\ntype Error = {\n  [key: string]: string | undefined;\n};\n\ntype Option = {\n  [key: string]: string;\n};\n\nconst useForm = <T extends {}>(\n  initInput: T,\n  callback: () => void,\n  validator: (field: string, inputValue: string | { [key: string]: string }) => { [key: string]: string } | null\n): {\n  input: T;\n  errors: Error;\n  setInput: React.Dispatch<React.SetStateAction<T>>;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  resetForm: () => void;\n  submit: (e: React.FormEvent<HTMLFormElement>) => void;\n  handleChangeSelect: (option: Option) => void;\n} => {\n  const [input, setInput] = useState(initInput);\n  const [errors, setErrors] = useState<Error>({});\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    clearValidation(name);\n\n    setInput((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleChangeSelect = (option: Option) => {\n    const { name, id, field, url } = option;\n\n    clearValidation(field);\n\n    setInput((prevState) => ({\n      ...prevState,\n      [field]: {\n        name,\n        id,\n        url\n      },\n    }));\n  };\n\n  const submit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const isFormValid = validate();\n\n    if (!isFormValid) return;\n\n    callback();\n    resetForm();\n  };\n\n  const validate = () => {\n    let isValid = true;\n\n    Object.entries(input).forEach(([key, value]) => {\n      const inputErrorObj = validator(key, value as string | { [key: string]: string });\n      if (inputErrorObj) {\n        isValid = false;\n        setErrors((prev) => ({ ...prev, ...inputErrorObj }));\n      }\n    });\n\n    return isValid;\n  };\n\n  const clearValidation = (field: keyof Error) => {\n    if (field) {\n      setErrors((prevState) => ({\n        ...prevState,\n        [field]: undefined,\n      }));\n      return;\n    }\n    setErrors({});\n  };\n\n  const resetForm = () => {\n    setInput(initInput);\n    setErrors({});\n  };\n\n  return { input, errors, setInput, handleChange, resetForm, submit, handleChangeSelect };\n};\n\nexport default useForm;\n"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAUA,MAAMC,OAAO,GAAG,CACdC,SADc,EAEdC,QAFc,EAGdC,SAHc,KAYX;EAAA;;EACH,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACE,SAAD,CAAlC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAQ,EAAR,CAApC;;EAEA,MAAMS,YAAY,GAAIC,CAAD,IAAkE;IACrF,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAkBF,CAAC,CAACG,MAA1B;IAEAC,eAAe,CAACH,IAAD,CAAf;IAEAL,QAAQ,CAAES,SAAD,KAAgB,EACvB,GAAGA,SADoB;MAEvB,CAACJ,IAAD,GAAQC;IAFe,CAAhB,CAAD,CAAR;EAID,CATD;;EAWA,MAAMI,kBAAkB,GAAIC,MAAD,IAAoB;IAC7C,MAAM;MAAEN,IAAF;MAAQO,EAAR;MAAYC,KAAZ;MAAmBC;IAAnB,IAA2BH,MAAjC;IAEAH,eAAe,CAACK,KAAD,CAAf;IAEAb,QAAQ,CAAES,SAAD,KAAgB,EACvB,GAAGA,SADoB;MAEvB,CAACI,KAAD,GAAS;QACPR,IADO;QAEPO,EAFO;QAGPE;MAHO;IAFc,CAAhB,CAAD,CAAR;EAQD,CAbD;;EAeA,MAAMC,MAAM,GAAIX,CAAD,IAAyC;IACtDA,CAAC,CAACY,cAAF;IAEA,MAAMC,WAAW,GAAGC,QAAQ,EAA5B;IAEA,IAAI,CAACD,WAAL,EAAkB;IAElBpB,QAAQ;IACRsB,SAAS;EACV,CATD;;EAWA,MAAMD,QAAQ,GAAG,MAAM;IACrB,IAAIE,OAAO,GAAG,IAAd;IAEAC,MAAM,CAACC,OAAP,CAAevB,KAAf,EAAsBwB,OAAtB,CAA8B,QAAkB;MAAA,IAAjB,CAACC,GAAD,EAAMlB,KAAN,CAAiB;MAC9C,MAAMmB,aAAa,GAAG3B,SAAS,CAAC0B,GAAD,EAAMlB,KAAN,CAA/B;;MACA,IAAImB,aAAJ,EAAmB;QACjBL,OAAO,GAAG,KAAV;QACAlB,SAAS,CAAEwB,IAAD,KAAW,EAAE,GAAGA,IAAL;UAAW,GAAGD;QAAd,CAAX,CAAD,CAAT;MACD;IACF,CAND;IAQA,OAAOL,OAAP;EACD,CAZD;;EAcA,MAAMZ,eAAe,GAAIK,KAAD,IAAwB;IAC9C,IAAIA,KAAJ,EAAW;MACTX,SAAS,CAAEO,SAAD,KAAgB,EACxB,GAAGA,SADqB;QAExB,CAACI,KAAD,GAASc;MAFe,CAAhB,CAAD,CAAT;MAIA;IACD;;IACDzB,SAAS,CAAC,EAAD,CAAT;EACD,CATD;;EAWA,MAAMiB,SAAS,GAAG,MAAM;IACtBnB,QAAQ,CAACJ,SAAD,CAAR;IACAM,SAAS,CAAC,EAAD,CAAT;EACD,CAHD;;EAKA,OAAO;IAAEH,KAAF;IAASE,MAAT;IAAiBD,QAAjB;IAA2BG,YAA3B;IAAyCgB,SAAzC;IAAoDJ,MAApD;IAA4DL;EAA5D,CAAP;AACD,CApFD;;GAAMf,O;;AAsFN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}